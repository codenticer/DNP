//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DNP.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DNPDBEntities : DbContext
    {
        public DNPDBEntities()
            : base("name=DNPDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<spUserLogin_Result> spUserLogin(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserLogin_Result>("spUserLogin", emailParameter, passwordParameter);
        }
    
        public virtual int spUserRegistration(string xMLData)
        {
            var xMLDataParameter = xMLData != null ?
                new ObjectParameter("XMLData", xMLData) :
                new ObjectParameter("XMLData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserRegistration", xMLDataParameter);
        }
    
        public virtual int spUpdateUserOTP(string email, string oTP, Nullable<System.DateTime> oTPDateTime)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var oTPParameter = oTP != null ?
                new ObjectParameter("OTP", oTP) :
                new ObjectParameter("OTP", typeof(string));
    
            var oTPDateTimeParameter = oTPDateTime.HasValue ?
                new ObjectParameter("OTPDateTime", oTPDateTime) :
                new ObjectParameter("OTPDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateUserOTP", emailParameter, oTPParameter, oTPDateTimeParameter);
        }
    
        public virtual ObjectResult<spGetUserByEmail_Result> spGetUserByEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserByEmail_Result>("spGetUserByEmail", emailParameter);
        }
    
        public virtual int spUpdateNewPassword(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateNewPassword", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spGetUserByUsernameAndEmail_Result> spGetUserByUsernameAndEmail(string email, string username)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserByUsernameAndEmail_Result>("spGetUserByUsernameAndEmail", emailParameter, usernameParameter);
        }
    
        public virtual ObjectResult<spGetCountry_Result> spGetCountry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCountry_Result>("spGetCountry");
        }
    
        public virtual ObjectResult<spGetStateByCountryId_Result> spGetStateByCountryId(Nullable<int> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStateByCountryId_Result>("spGetStateByCountryId", countryIdParameter);
        }
    
        public virtual ObjectResult<spGetCityByStateId_Result> spGetCityByStateId(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCityByStateId_Result>("spGetCityByStateId", stateIdParameter);
        }
    
        public virtual int spCreateTransactionDetails(string transactionId, Nullable<long> amount, string orderId, string customerName, string customerEmail, string mobile, string productName, Nullable<int> userID, string paymentStatus)
        {
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(long));
    
            var orderIdParameter = orderId != null ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("CustomerEmail", customerEmail) :
                new ObjectParameter("CustomerEmail", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateTransactionDetails", transactionIdParameter, amountParameter, orderIdParameter, customerNameParameter, customerEmailParameter, mobileParameter, productNameParameter, userIDParameter, paymentStatusParameter);
        }
    
        public virtual int spCreateUserOrderDetails(string orderId, Nullable<int> userID, string productName, Nullable<int> amount, string photo)
        {
            var orderIdParameter = orderId != null ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateUserOrderDetails", orderIdParameter, userIDParameter, productNameParameter, amountParameter, photoParameter);
        }
    
        public virtual ObjectResult<spGetUserDetailsByEmailorUsername_Result> spGetUserDetailsByEmailorUsername(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUserDetailsByEmailorUsername_Result>("spGetUserDetailsByEmailorUsername", emailParameter);
        }
    
        public virtual ObjectResult<spGetProductPriceBySymbol_Result> spGetProductPriceBySymbol()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetProductPriceBySymbol_Result>("spGetProductPriceBySymbol");
        }
    }
}
